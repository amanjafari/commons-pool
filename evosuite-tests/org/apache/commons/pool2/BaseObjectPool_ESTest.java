/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 19 17:28:15 KST 2020
 */

package org.apache.commons.pool2;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.ArgumentMatchers.nullable;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.NoSuchElementException;

import org.apache.commons.pool2.impl.SoftReferenceObjectPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class BaseObjectPool_ESTest extends BaseObjectPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>((PooledObjectFactory<String>) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      ((BaseObjectPool)softReferenceObjectPool0).toStringAppendFields(stringBuilder0);
      assertEquals(0, softReferenceObjectPool0.getNumActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PooledObject<String> pooledObject0 = (PooledObject<String>) mock(PooledObject.class, new ViolatedAssumptionAnswer());
      doReturn("J2CqsoxS").when(pooledObject0).getObject();
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledObject0).when(pooledObjectFactory0).makeObject();
      doReturn(true, false).when(pooledObjectFactory0).validateObject(nullable(org.apache.commons.pool2.PooledObject.class));
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.borrowObject();
      softReferenceObjectPool0.returnObject("J2CqsoxS");
      assertFalse(softReferenceObjectPool0.isClosed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>((PooledObjectFactory<String>) null);
      ((BaseObjectPool)softReferenceObjectPool0).assertOpen();
      assertEquals(0, softReferenceObjectPool0.getNumActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PooledObject<Object> pooledObject0 = (PooledObject<Object>) mock(PooledObject.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pooledObject0).getObject();
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledObject0).when(pooledObjectFactory0).makeObject();
      doReturn(false).when(pooledObjectFactory0).validateObject(nullable(org.apache.commons.pool2.PooledObject.class));
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      softReferenceObjectPool0.addObject();
      assertFalse(softReferenceObjectPool0.isClosed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      softReferenceObjectPool0.clear();
      assertFalse(softReferenceObjectPool0.isClosed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      softReferenceObjectPool0.close();
      boolean boolean0 = softReferenceObjectPool0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      int int0 = softReferenceObjectPool0.getNumIdle();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      int int0 = softReferenceObjectPool0.getNumActive();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PooledObject<Object> pooledObject0 = (PooledObject<Object>) mock(PooledObject.class, new ViolatedAssumptionAnswer());
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      try { 
        softReferenceObjectPool0.borrowObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      // Undeclared exception!
      try { 
        ((BaseObjectPool)softReferenceObjectPool0).toStringAppendFields((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.BaseObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>((PooledObjectFactory<Object>) null);
      try { 
        softReferenceObjectPool0.returnObject((Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Returned object not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      try { 
        softReferenceObjectPool0.invalidateObject("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object to invalidate is not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>((PooledObjectFactory<Object>) null);
      try { 
        softReferenceObjectPool0.borrowObject();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.close();
      try { 
        ((BaseObjectPool)softReferenceObjectPool0).assertOpen();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pool not open
         //
         verifyException("org.apache.commons.pool2.BaseObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      try { 
        softReferenceObjectPool0.addObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.close();
      try { 
        softReferenceObjectPool0.addObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pool not open
         //
         verifyException("org.apache.commons.pool2.BaseObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      boolean boolean0 = softReferenceObjectPool0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.close();
      try { 
        softReferenceObjectPool0.borrowObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pool not open
         //
         verifyException("org.apache.commons.pool2.BaseObjectPool", e);
      }
  }
}
