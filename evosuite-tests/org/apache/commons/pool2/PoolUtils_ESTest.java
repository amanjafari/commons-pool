/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 19 17:44:14 KST 2020
 */

package org.apache.commons.pool2;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.ArgumentMatchers.any;
import static org.evosuite.shaded.org.mockito.ArgumentMatchers.anyString;
import static org.evosuite.shaded.org.mockito.ArgumentMatchers.nullable;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.PrintStream;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.time.chrono.HijrahDate;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.TimerTask;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;

import org.apache.commons.pool2.impl.AbandonedConfig;
import org.apache.commons.pool2.impl.DefaultPooledObject;
import org.apache.commons.pool2.impl.GenericKeyedObjectPool;
import org.apache.commons.pool2.impl.GenericKeyedObjectPoolConfig;
import org.apache.commons.pool2.impl.GenericObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.apache.commons.pool2.impl.PooledSoftReference;
import org.apache.commons.pool2.impl.SoftReferenceObjectPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class PoolUtils_ESTest extends PoolUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Throwable throwable0 = new Throwable("}\"+H0v/Avx");
      //  // Unstable assertion: assertNotNull(throwable0);
      //  // Unstable assertion: assertEquals("java.lang.Throwable: }\"+H0v/Avx", throwable0.toString());
      //  // Unstable assertion: assertEquals("}\"+H0v/Avx", throwable0.getMessage());
      
      PoolUtils.checkRethrow(throwable0);
      //  // Unstable assertion: assertEquals("java.lang.Throwable: }\"+H0v/Avx", throwable0.toString());
      //  // Unstable assertion: assertEquals("}\"+H0v/Avx", throwable0.getMessage());
      
      Integer integer0 = new Integer((-2080));
      //  // Unstable assertion: assertNotNull(integer0);
      //  // Unstable assertion: assertEquals((-2080), (int)integer0);
      
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>(integer0);
      //  // Unstable assertion: assertNotNull(defaultPooledObject0);
      //  // Unstable assertion: assertEquals(1584607408686L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertEquals(1584607408686L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1584607408686L, defaultPooledObject0.getCreateTime());
      
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      //  // Unstable assertion: assertNotNull(stackOverflowError0);
      //  // Unstable assertion: assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      //  // Unstable assertion: assertNull(stackOverflowError0.getMessage());
      
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<StackOverflowError, String>) null, stackOverflowError0, 617, (-1621L));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoolUtils.TimerHolder poolUtils_TimerHolder0 = new PoolUtils.TimerHolder();
      assertNotNull(poolUtils_TimerHolder0);
      
      UnknownError unknownError0 = new UnknownError("23zDOI/^p1H");
      assertNotNull(unknownError0);
      assertEquals("java.lang.UnknownError: 23zDOI/^p1H", unknownError0.toString());
      assertEquals("23zDOI/^p1H", unknownError0.getMessage());
      
      GenericObjectPoolConfig<InternalError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<InternalError>();
      assertNotNull(genericObjectPoolConfig0);
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      
      genericObjectPoolConfig0.setTestWhileIdle(true);
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      
      GenericObjectPoolConfig<InternalError> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals(10000L, genericObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertTrue(genericObjectPoolConfig1.getLifo());
      
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("Ftt)N3&Ok:6", "WaEy^vC&").when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory2 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory1));
      assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory2);
      assertNotSame(keyedPooledObjectFactory1, keyedPooledObjectFactory2);
      assertNotSame(keyedPooledObjectFactory2, keyedPooledObjectFactory1);
      
      try { 
        PoolUtils.prefill((KeyedObjectPool<OutOfMemoryError, Integer>) null, (Collection<OutOfMemoryError>) null, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Throwable throwable0 = new Throwable("}\"+H0v/Avx");
      //  // Unstable assertion: assertNotNull(throwable0);
      //  // Unstable assertion: assertEquals("java.lang.Throwable: }\"+H0v/Avx", throwable0.toString());
      //  // Unstable assertion: assertEquals("}\"+H0v/Avx", throwable0.getMessage());
      
      PoolUtils.checkRethrow(throwable0);
      //  // Unstable assertion: assertEquals("java.lang.Throwable: }\"+H0v/Avx", throwable0.toString());
      //  // Unstable assertion: assertEquals("}\"+H0v/Avx", throwable0.getMessage());
      
      Integer integer0 = new Integer(2);
      //  // Unstable assertion: assertNotNull(integer0);
      //  // Unstable assertion: assertEquals(2, (int)integer0);
      
      DefaultPooledObject<Integer> defaultPooledObject0 = new DefaultPooledObject<Integer>(integer0);
      //  // Unstable assertion: assertNotNull(defaultPooledObject0);
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1584607408677L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(1584607408677L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607408677L, defaultPooledObject0.getLastBorrowTime());
      
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("{factory=").when(pooledObjectFactory0).toString();
      doReturn(defaultPooledObject0).when(pooledObjectFactory0).makeObject();
      doReturn(false).when(pooledObjectFactory0).validateObject(nullable(org.apache.commons.pool2.PooledObject.class));
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(pooledObjectFactory1);
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(1584607408677L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1584607408677L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607408677L, defaultPooledObject0.getLastBorrowTime());
      
      SoftReferenceObjectPool<Integer> softReferenceObjectPool0 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory1);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(softReferenceObjectPool0);
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(1584607408677L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1584607408677L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607408677L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertEquals(0, softReferenceObjectPool0.getNumActive());
      //  // Unstable assertion: assertFalse(softReferenceObjectPool0.isClosed());
      
      try { 
        softReferenceObjectPool0.borrowObject();
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // Could not create a validated object, cause: ValidateObject failed
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoolUtils.TimerHolder poolUtils_TimerHolder0 = new PoolUtils.TimerHolder();
      assertNotNull(poolUtils_TimerHolder0);
      
      GenericKeyedObjectPoolConfig<OutOfMemoryError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<OutOfMemoryError>();
      assertNotNull(genericKeyedObjectPoolConfig0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      
      GenericKeyedObjectPoolConfig<OutOfMemoryError> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNotNull(genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals(1800000L, genericKeyedObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(10000L, genericKeyedObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      
      genericKeyedObjectPoolConfig1.setBlockWhenExhausted(true);
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals(1800000L, genericKeyedObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals(10000L, genericKeyedObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      
      ArrayDeque<StackOverflowError> arrayDeque0 = new ArrayDeque<StackOverflowError>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      int int0 = (-6055);
      KeyedPooledObjectFactory<UnknownError, OutOfMemoryError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<UnknownError, OutOfMemoryError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<UnknownError, OutOfMemoryError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      KeyedPooledObjectFactory<UnknownError, OutOfMemoryError> keyedPooledObjectFactory2 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory1));
      assertNotNull(keyedPooledObjectFactory2);
      assertNotSame(keyedPooledObjectFactory1, keyedPooledObjectFactory2);
      assertNotSame(keyedPooledObjectFactory2, keyedPooledObjectFactory1);
      
      KeyedPooledObjectFactory<StackOverflowError, Integer> keyedPooledObjectFactory3 = (KeyedPooledObjectFactory<StackOverflowError, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory3).toString();
      KeyedPooledObjectFactory<StackOverflowError, Integer> keyedPooledObjectFactory4 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory3);
      assertFalse(keyedPooledObjectFactory4.equals((Object)keyedPooledObjectFactory3));
      assertNotNull(keyedPooledObjectFactory4);
      
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig2 = new GenericKeyedObjectPoolConfig<Integer>();
      assertNotNull(genericKeyedObjectPoolConfig2);
      assertFalse(genericKeyedObjectPoolConfig2.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig2.getMaxIdlePerKey());
      assertEquals(1800000L, genericKeyedObjectPoolConfig2.getMinEvictableIdleTimeMillis());
      assertEquals((-1), genericKeyedObjectPoolConfig2.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig2.getJmxEnabled());
      assertEquals("pool", genericKeyedObjectPoolConfig2.getJmxNamePrefix());
      assertEquals(3, genericKeyedObjectPoolConfig2.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig2.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig2.getTestOnReturn());
      assertEquals((-1L), genericKeyedObjectPoolConfig2.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig2.getFairness());
      assertTrue(genericKeyedObjectPoolConfig2.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig2.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig2.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig2.getMaxTotalPerKey());
      assertEquals(10000L, genericKeyedObjectPoolConfig2.getEvictorShutdownTimeoutMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig2.getMaxWaitMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig2.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig2.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig2.getLifo());
      assertEquals(0, genericKeyedObjectPoolConfig2.getMinIdlePerKey());
      
      GenericKeyedObjectPool<StackOverflowError, Integer> genericKeyedObjectPool0 = new GenericKeyedObjectPool<StackOverflowError, Integer>(keyedPooledObjectFactory4, genericKeyedObjectPoolConfig2);
      assertFalse(keyedPooledObjectFactory4.equals((Object)keyedPooledObjectFactory3));
      assertNotNull(genericKeyedObjectPool0);
      assertFalse(genericKeyedObjectPoolConfig2.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig2.getMaxIdlePerKey());
      assertEquals(1800000L, genericKeyedObjectPoolConfig2.getMinEvictableIdleTimeMillis());
      assertEquals((-1), genericKeyedObjectPoolConfig2.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig2.getJmxEnabled());
      assertEquals("pool", genericKeyedObjectPoolConfig2.getJmxNamePrefix());
      assertEquals(3, genericKeyedObjectPoolConfig2.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig2.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig2.getTestOnReturn());
      assertEquals((-1L), genericKeyedObjectPoolConfig2.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig2.getFairness());
      assertTrue(genericKeyedObjectPoolConfig2.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig2.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig2.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig2.getMaxTotalPerKey());
      assertEquals(10000L, genericKeyedObjectPoolConfig2.getEvictorShutdownTimeoutMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig2.getMaxWaitMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig2.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig2.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig2.getLifo());
      assertEquals(0, genericKeyedObjectPoolConfig2.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      
      KeyedObjectPool<StackOverflowError, Integer> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<StackOverflowError, Integer>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory4.equals((Object)keyedPooledObjectFactory3));
      assertNotNull(keyedObjectPool0);
      assertFalse(genericKeyedObjectPoolConfig2.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig2.getMaxIdlePerKey());
      assertEquals(1800000L, genericKeyedObjectPoolConfig2.getMinEvictableIdleTimeMillis());
      assertEquals((-1), genericKeyedObjectPoolConfig2.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig2.getJmxEnabled());
      assertEquals("pool", genericKeyedObjectPoolConfig2.getJmxNamePrefix());
      assertEquals(3, genericKeyedObjectPoolConfig2.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig2.getTestOnCreate());
      assertFalse(genericKeyedObjectPoolConfig2.getTestOnReturn());
      assertEquals((-1L), genericKeyedObjectPoolConfig2.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig2.getFairness());
      assertTrue(genericKeyedObjectPoolConfig2.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig2.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig2.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig2.getMaxTotalPerKey());
      assertEquals(10000L, genericKeyedObjectPoolConfig2.getEvictorShutdownTimeoutMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig2.getMaxWaitMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig2.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig2.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig2.getLifo());
      assertEquals(0, genericKeyedObjectPoolConfig2.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertNotNull(stackOverflowError0);
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNull(stackOverflowError0.getMessage());
      
      try { 
        PoolUtils.checkMinIdle(keyedObjectPool0, stackOverflowError0, (-6055), (-335L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minIdle must be non-negative.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayDeque<ThreadDeath> arrayDeque0 = new ArrayDeque<ThreadDeath>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      InternalError internalError0 = new InternalError((String) null, (Throwable) null);
      assertNotNull(internalError0);
      assertNull(internalError0.getMessage());
      assertEquals("java.lang.InternalError", internalError0.toString());
      
      Predicate<ThreadDeath> predicate0 = Predicate.isEqual((Object) internalError0);
      assertNotNull(predicate0);
      assertNull(internalError0.getMessage());
      assertEquals("java.lang.InternalError", internalError0.toString());
      
      boolean boolean0 = arrayDeque0.removeIf(predicate0);
      assertFalse(boolean0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNull(internalError0.getMessage());
      assertEquals("java.lang.InternalError", internalError0.toString());
      
      try { 
        PoolUtils.prefill((KeyedObjectPool<ThreadDeath, Object>) null, (Collection<ThreadDeath>) arrayDeque0, (-316));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>((Object) null);
      //  // Unstable assertion: assertNotNull(defaultPooledObject0);
      //  // Unstable assertion: assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastBorrowTime());
      
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      doReturn(defaultPooledObject0).when(pooledObjectFactory0).makeObject();
      PooledObjectFactory<Object> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(pooledObjectFactory1);
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getIdleTimeMillis());
      
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(genericObjectPool0);
      //  // Unstable assertion: assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(29L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(29L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      
      genericObjectPool0.setMinIdle((-1913));
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(30L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(30L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals((-1913), genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      
      Object object0 = genericObjectPool0.borrowObject((long) (-1913));
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNull(object0);
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(1584607408567L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(PooledObjectState.ALLOCATED, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(31L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals(1L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals((-1913), genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(30L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(1L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      
      int int0 = genericObjectPool0.getNumWaiters();
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(1584607408567L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(PooledObjectState.ALLOCATED, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(31L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals(1L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals((-1913), genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(30L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(1L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      
      genericObjectPool0.setMaxTotal(0);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(1584607408567L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(PooledObjectState.ALLOCATED, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(31L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals(1L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals((-1913), genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(30L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(1L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      
      String string0 = genericObjectPool0.getFactoryType();
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.PoolUtils$SynchronizedPooledObjectFactory<java.lang.Object>", string0);
      //  // Unstable assertion: assertEquals(1584607408567L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(5L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(PooledObjectState.ALLOCATED, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(35L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals(1L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals((-1913), genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(30L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(1L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      
      PoolUtils.prefill((ObjectPool<Object>) genericObjectPool0, (-2342));
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertEquals(1584607408567L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(5L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(PooledObjectState.ALLOCATED, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607408537L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(35L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals(1L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals((-1913), genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals(30L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(1L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        PoolUtils.checkMinIdle((ObjectPool<String>) null, 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 8;
      try { 
        PoolUtils.prefill((KeyedObjectPool<Object, Integer>) null, (Object) null, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KeyedPooledObjectFactory<ThreadDeath, OutOfMemoryError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<ThreadDeath, OutOfMemoryError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<ThreadDeath, OutOfMemoryError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<ThreadDeath, OutOfMemoryError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<ThreadDeath, OutOfMemoryError>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(genericKeyedObjectPool0);
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.isClosed());
      
      KeyedObjectPool<ThreadDeath, OutOfMemoryError> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<ThreadDeath, OutOfMemoryError>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedObjectPool0);
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.isClosed());
      
      ThreadDeath threadDeath0 = new ThreadDeath();
      assertNotNull(threadDeath0);
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      assertNull(threadDeath0.getMessage());
      
      try { 
        PoolUtils.checkMinIdle(keyedObjectPool0, threadDeath0, 0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-positive period.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KeyedPooledObjectFactory<ThreadDeath, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<ThreadDeath, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<ThreadDeath, Object> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<ThreadDeath, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<ThreadDeath, Object>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(genericKeyedObjectPool0);
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      
      KeyedObjectPool<ThreadDeath, Object> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<ThreadDeath, Object>) genericKeyedObjectPool0, 1656.9983F, false);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedObjectPool0);
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      
      LinkedList<ThreadDeath> linkedList0 = new LinkedList<ThreadDeath>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Map<ThreadDeath, TimerTask> map0 = PoolUtils.checkMinIdle(keyedObjectPool0, (Collection<ThreadDeath>) linkedList0, 2, (-3007L));
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(map0);
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(0, linkedList0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PooledObjectFactory<StackOverflowError> pooledObjectFactory0 = (PooledObjectFactory<StackOverflowError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<StackOverflowError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      SoftReferenceObjectPool<StackOverflowError> softReferenceObjectPool0 = new SoftReferenceObjectPool<StackOverflowError>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(softReferenceObjectPool0);
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      
      ObjectPool<StackOverflowError> objectPool0 = PoolUtils.synchronizedPool((ObjectPool<StackOverflowError>) softReferenceObjectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(objectPool0);
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((ObjectPool<ThreadDeath>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreadDeath threadDeath0 = new ThreadDeath();
      assertNotNull(threadDeath0);
      assertNull(threadDeath0.getMessage());
      assertEquals("java.lang.ThreadDeath", threadDeath0.toString());
      
      // Undeclared exception!
      try { 
        PoolUtils.checkRethrow(threadDeath0);
        fail("Expecting exception: ThreadDeath");
      
      } catch(ThreadDeath e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeyedPooledObjectFactory<StackOverflowError, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<StackOverflowError, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(keyedPooledObjectFactory0).makeObject(any(java.lang.StackOverflowError.class));
      KeyedPooledObjectFactory<StackOverflowError, String> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      assertNotNull(genericKeyedObjectPoolConfig0);
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      
      GenericKeyedObjectPool<StackOverflowError, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<StackOverflowError, String>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(genericKeyedObjectPool0);
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      
      KeyedObjectPool<StackOverflowError, String> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<StackOverflowError, String>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedObjectPool0);
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      
      KeyedObjectPool<StackOverflowError, String> keyedObjectPool1 = PoolUtils.erodingPool(keyedObjectPool0, 1205.9703F);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedObjectPool1.equals((Object)keyedObjectPool0));
      assertNotNull(keyedObjectPool1);
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      
      StackOverflowError stackOverflowError0 = new StackOverflowError("ecY,eOS!z");
      assertNotNull(stackOverflowError0);
      assertEquals("ecY,eOS!z", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: ecY,eOS!z", stackOverflowError0.toString());
      
      try { 
        PoolUtils.prefill(keyedObjectPool1, stackOverflowError0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      PooledObjectFactory<Integer> pooledObjectFactory2 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertNotNull(pooledObjectFactory2);
      assertNotSame(pooledObjectFactory1, pooledObjectFactory2);
      assertNotSame(pooledObjectFactory2, pooledObjectFactory1);
      
      KeyedPooledObjectFactory<OutOfMemoryError, Integer> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<OutOfMemoryError, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<OutOfMemoryError, Integer> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      assertNotNull(genericKeyedObjectPoolConfig0);
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNotNull(genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals(1800000L, genericKeyedObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(10000L, genericKeyedObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getMaxWaitMillis());
      
      GenericKeyedObjectPool<OutOfMemoryError, Integer> genericKeyedObjectPool0 = new GenericKeyedObjectPool<OutOfMemoryError, Integer>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNotNull(genericKeyedObjectPool0);
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals(1800000L, genericKeyedObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(10000L, genericKeyedObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      
      KeyedObjectPool<OutOfMemoryError, Integer> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<OutOfMemoryError, Integer>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNotNull(keyedObjectPool0);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertEquals(1800000L, genericKeyedObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertEquals(10000L, genericKeyedObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      
      KeyedPooledObjectFactory<StackOverflowError, StackOverflowError> keyedPooledObjectFactory2 = (KeyedPooledObjectFactory<StackOverflowError, StackOverflowError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory2).toString();
      KeyedPooledObjectFactory<StackOverflowError, StackOverflowError> keyedPooledObjectFactory3 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory2);
      assertFalse(keyedPooledObjectFactory3.equals((Object)keyedPooledObjectFactory2));
      assertNotNull(keyedPooledObjectFactory3);
      
      GenericKeyedObjectPool<StackOverflowError, StackOverflowError> genericKeyedObjectPool1 = new GenericKeyedObjectPool<StackOverflowError, StackOverflowError>(keyedPooledObjectFactory3);
      assertFalse(keyedPooledObjectFactory3.equals((Object)keyedPooledObjectFactory2));
      assertNotNull(genericKeyedObjectPool1);
      assertEquals(3, genericKeyedObjectPool1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool1.isClosed());
      assertEquals(0L, genericKeyedObjectPool1.getMaxBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool1.getFairness());
      assertTrue(genericKeyedObjectPool1.getLifo());
      assertEquals(8, genericKeyedObjectPool1.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool1.getCreatedCount());
      assertEquals((-1L), genericKeyedObjectPool1.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPool1.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPool1.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool1.getBlockWhenExhausted());
      assertEquals((-1L), genericKeyedObjectPool1.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPool1.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool1.getBorrowedCount());
      assertEquals(0, genericKeyedObjectPool1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool1.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedByEvictorCount());
      assertEquals(1800000L, genericKeyedObjectPool1.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedCount());
      assertEquals((-1L), genericKeyedObjectPool1.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool1.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool1.getMeanBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool1.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool1.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedByBorrowValidationCount());
      assertEquals(10000L, genericKeyedObjectPool1.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool1.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool1.getTestOnReturn());
      
      KeyedObjectPool<StackOverflowError, StackOverflowError> keyedObjectPool1 = PoolUtils.synchronizedPool((KeyedObjectPool<StackOverflowError, StackOverflowError>) genericKeyedObjectPool1);
      assertFalse(keyedPooledObjectFactory3.equals((Object)keyedPooledObjectFactory2));
      assertNotNull(keyedObjectPool1);
      assertEquals(3, genericKeyedObjectPool1.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool1.isClosed());
      assertEquals(0L, genericKeyedObjectPool1.getMaxBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool1.getFairness());
      assertTrue(genericKeyedObjectPool1.getLifo());
      assertEquals(8, genericKeyedObjectPool1.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool1.getCreatedCount());
      assertEquals((-1L), genericKeyedObjectPool1.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPool1.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPool1.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPool1.getBlockWhenExhausted());
      assertEquals((-1L), genericKeyedObjectPool1.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPool1.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool1.getBorrowedCount());
      assertEquals(0, genericKeyedObjectPool1.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool1.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedByEvictorCount());
      assertEquals(1800000L, genericKeyedObjectPool1.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedCount());
      assertEquals((-1L), genericKeyedObjectPool1.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool1.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool1.getMeanBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool1.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool1.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool1.getDestroyedByBorrowValidationCount());
      assertEquals(10000L, genericKeyedObjectPool1.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool1.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool1.getTestOnReturn());
      
      try { 
        PoolUtils.checkMinIdle(keyedObjectPool1, (Collection<StackOverflowError>) null, (-3695), (long) (-3695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((ObjectPool<Integer>) null, 1709.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoolUtils.TimerHolder poolUtils_TimerHolder0 = new PoolUtils.TimerHolder();
      //  // Unstable assertion: assertNotNull(poolUtils_TimerHolder0);
      
      PooledObjectFactory<InternalError> pooledObjectFactory0 = (PooledObjectFactory<InternalError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      PooledObjectFactory<InternalError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<InternalError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<InternalError>();
      //  // Unstable assertion: assertNotNull(genericObjectPoolConfig0);
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      
      GenericObjectPoolConfig<InternalError> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      //  // Unstable assertion: assertNotNull(genericObjectPoolConfig1);
      //  // Unstable assertion: assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      //  // Unstable assertion: assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getFairness());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig1.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getLifo());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      
      GenericObjectPool<InternalError> genericObjectPool0 = new GenericObjectPool<InternalError>(pooledObjectFactory1, genericObjectPoolConfig1);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      //  // Unstable assertion: assertNotNull(genericObjectPool0);
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getFairness());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig1.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getLifo());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      
      TimerTask timerTask0 = PoolUtils.checkMinIdle((ObjectPool<InternalError>) genericObjectPool0, 9, (long) 9);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      //  // Unstable assertion: assertNotNull(timerTask0);
      //  // Unstable assertion: assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      //  // Unstable assertion: assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getFairness());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertNull(genericObjectPoolConfig1.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      //  // Unstable assertion: assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      //  // Unstable assertion: assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getLifo());
      //  // Unstable assertion: assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals(1L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertEquals(1584607408020L, timerTask0.scheduledExecutionTime());
      
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(keyedPooledObjectFactory1);
      
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory2 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory1);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory1));
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(keyedPooledObjectFactory2);
      //  // Unstable assertion: assertNotSame(keyedPooledObjectFactory1, keyedPooledObjectFactory2);
      //  // Unstable assertion: assertNotSame(keyedPooledObjectFactory2, keyedPooledObjectFactory1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoolUtils poolUtils0 = new PoolUtils();
      assertNotNull(poolUtils0);
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<ThreadDeath, String>) null, (-249.32364F), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KeyedPooledObjectFactory<Integer, Integer> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, "{keyedPool=", "{keyedPool=").when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Integer, Integer> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      assertNotNull(genericKeyedObjectPoolConfig0);
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      
      GenericKeyedObjectPool<Integer, Integer> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, Integer>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(genericKeyedObjectPool0);
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericKeyedObjectPool0.getLifo());
      
      Map<String, Integer> map0 = genericKeyedObjectPool0.getNumWaitersByKey();
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(map0);
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      KeyedObjectPool<Integer, Integer> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<Integer, Integer>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedObjectPool0);
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericKeyedObjectPool0.getLifo());
      
      PooledObjectFactory<InternalError> pooledObjectFactory0 = (PooledObjectFactory<InternalError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<InternalError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPool<InternalError> genericObjectPool0 = new GenericObjectPool<InternalError>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(genericObjectPool0);
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      
      ObjectPool<InternalError> objectPool0 = PoolUtils.erodingPool((ObjectPool<InternalError>) genericObjectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(objectPool0);
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      
      PooledObjectFactory<Object> pooledObjectFactory2 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(pooledObjectFactory2).toString();
      PooledObjectFactory<Object> pooledObjectFactory3 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory2);
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory2));
      assertNotNull(pooledObjectFactory3);
      
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory3);
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory2));
      assertNotNull(softReferenceObjectPool0);
      assertFalse(softReferenceObjectPool0.isClosed());
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      
      ObjectPool<Object> objectPool1 = PoolUtils.erodingPool((ObjectPool<Object>) softReferenceObjectPool0);
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory2));
      assertNotNull(objectPool1);
      assertFalse(softReferenceObjectPool0.isClosed());
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      
      ObjectPool<Object> objectPool2 = PoolUtils.erodingPool(objectPool1, 1987.269F);
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory2));
      assertFalse(objectPool2.equals((Object)objectPool1));
      assertNotNull(objectPool2);
      assertNotSame(objectPool1, objectPool2);
      assertNotSame(objectPool2, objectPool1);
      assertFalse(softReferenceObjectPool0.isClosed());
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      
      try { 
        PoolUtils.checkMinIdle(objectPool2, 0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-positive period.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PooledObjectFactory<StackOverflowError> pooledObjectFactory0 = (PooledObjectFactory<StackOverflowError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<StackOverflowError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      SoftReferenceObjectPool<StackOverflowError> softReferenceObjectPool0 = new SoftReferenceObjectPool<StackOverflowError>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(softReferenceObjectPool0);
      assertFalse(softReferenceObjectPool0.isClosed());
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      
      ObjectPool<StackOverflowError> objectPool0 = PoolUtils.erodingPool((ObjectPool<StackOverflowError>) softReferenceObjectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(objectPool0);
      assertFalse(softReferenceObjectPool0.isClosed());
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      
      KeyedPooledObjectFactory<Integer, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Integer, Object> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<Integer, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, Object>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(genericKeyedObjectPool0);
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<Integer, Object>) genericKeyedObjectPool0, 0.0F, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KeyedPooledObjectFactory<String, UnknownError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, UnknownError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<String, UnknownError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<UnknownError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<UnknownError>();
      assertNotNull(genericKeyedObjectPoolConfig0);
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      
      GenericKeyedObjectPoolConfig<UnknownError> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNotNull(genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig1);
      assertNotSame(genericKeyedObjectPoolConfig1, genericKeyedObjectPoolConfig0);
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(1800000L, genericKeyedObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals(10000L, genericKeyedObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      
      GenericKeyedObjectPool<String, UnknownError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, UnknownError>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(genericKeyedObjectPoolConfig0.equals((Object)genericKeyedObjectPoolConfig1));
      assertFalse(genericKeyedObjectPoolConfig1.equals((Object)genericKeyedObjectPoolConfig0));
      assertNotNull(genericKeyedObjectPool0);
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig1.getTestWhileIdle());
      assertEquals("pool", genericKeyedObjectPoolConfig1.getJmxNamePrefix());
      assertEquals(1800000L, genericKeyedObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPoolConfig1.getJmxEnabled());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(0, genericKeyedObjectPoolConfig1.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig1.getLifo());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig1.getFairness());
      assertEquals(10000L, genericKeyedObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig1.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig1.getMaxTotalPerKey());
      assertEquals((-1), genericKeyedObjectPoolConfig1.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      
      String string0 = null;
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<String, UnknownError>) genericKeyedObjectPool0, (String) null, 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPool((KeyedObjectPool<String, InternalError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<String> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory1, genericObjectPoolConfig0, (AbandonedConfig) null);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(genericObjectPool0);
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      
      GenericObjectPoolConfig<String> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertEquals(10000L, genericObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      
      PooledObjectFactory<String> pooledObjectFactory2 = genericObjectPool0.getFactory();
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory2);
      assertSame(pooledObjectFactory1, pooledObjectFactory2);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertSame(pooledObjectFactory2, pooledObjectFactory1);
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      
      PooledObjectFactory<String> pooledObjectFactory3 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory2);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory2));
      assertFalse(pooledObjectFactory3.equals((Object)pooledObjectFactory1));
      assertNotNull(pooledObjectFactory3);
      assertNotSame(pooledObjectFactory1, pooledObjectFactory3);
      assertSame(pooledObjectFactory1, pooledObjectFactory2);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(pooledObjectFactory2, pooledObjectFactory3);
      assertSame(pooledObjectFactory2, pooledObjectFactory1);
      assertNotSame(pooledObjectFactory3, pooledObjectFactory2);
      assertNotSame(pooledObjectFactory3, pooledObjectFactory1);
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      
      LinkedHashSet<InternalError> linkedHashSet0 = new LinkedHashSet<InternalError>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Map<InternalError, TimerTask> map0 = PoolUtils.checkMinIdle((KeyedObjectPool<InternalError, HijrahDate>) null, (Collection<InternalError>) linkedHashSet0, 3368, 1L);
      assertNotNull(map0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      PoolUtils.checkRethrow((Throwable) null);
      KeyedPooledObjectFactory<UnknownError, InternalError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<UnknownError, InternalError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<UnknownError, InternalError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<InternalError>();
      assertNotNull(genericKeyedObjectPoolConfig0);
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      
      GenericKeyedObjectPool<UnknownError, InternalError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<UnknownError, InternalError>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(genericKeyedObjectPool0);
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      
      try { 
        PoolUtils.checkMinIdle((KeyedObjectPool<UnknownError, InternalError>) genericKeyedObjectPool0, (UnknownError) null, 3368, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PooledObjectFactory<InternalError> pooledObjectFactory0 = (PooledObjectFactory<InternalError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<InternalError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPool<InternalError> genericObjectPool0 = new GenericObjectPool<InternalError>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(genericObjectPool0);
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      
      ObjectPool<InternalError> objectPool0 = PoolUtils.erodingPool((ObjectPool<InternalError>) genericObjectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(objectPool0);
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      
      try { 
        PoolUtils.prefill((ObjectPool<Object>) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KeyedPooledObjectFactory<OutOfMemoryError, InternalError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<OutOfMemoryError, InternalError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<OutOfMemoryError, InternalError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<InternalError>();
      //  // Unstable assertion: assertNotNull(genericKeyedObjectPoolConfig0);
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      
      GenericKeyedObjectPool<OutOfMemoryError, InternalError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<OutOfMemoryError, InternalError>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(genericKeyedObjectPool0);
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getFairness());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getLifo());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      
      KeyedObjectPool<OutOfMemoryError, InternalError> keyedObjectPool0 = PoolUtils.erodingPool((KeyedObjectPool<OutOfMemoryError, InternalError>) genericKeyedObjectPool0, 1180.5382F);
      //  // Unstable assertion: assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(keyedObjectPool0);
      //  // Unstable assertion: assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      //  // Unstable assertion: assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      //  // Unstable assertion: assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getFairness());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getLifo());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.isClosed());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      //  // Unstable assertion: assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      //  // Unstable assertion: assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool(keyedObjectPool0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          KeyedPooledObjectFactory<String, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
          doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
          KeyedPooledObjectFactory<String, Object> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
          assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
          assertNotNull(keyedPooledObjectFactory1);
          
          GenericKeyedObjectPool<String, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, Object>(keyedPooledObjectFactory1);
          assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
          assertNotNull(genericKeyedObjectPool0);
          assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
          assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
          assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
          assertFalse(genericKeyedObjectPool0.getTestOnCreate());
          assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
          assertFalse(genericKeyedObjectPool0.isClosed());
          assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
          assertFalse(genericKeyedObjectPool0.getFairness());
          assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
          assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
          assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
          assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
          assertTrue(genericKeyedObjectPool0.getLifo());
          assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
          assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
          assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
          assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
          assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
          assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
          assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
          assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
          assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
          assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
          assertFalse(genericKeyedObjectPool0.getTestOnReturn());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
          assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
          
          LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
          assertNotNull(linkedHashSet0);
          assertEquals(0, linkedHashSet0.size());
          assertTrue(linkedHashSet0.isEmpty());
          
          LinkedList<InternalError> linkedList0 = new LinkedList<InternalError>();
          assertNotNull(linkedList0);
          assertEquals(0, linkedList0.size());
          
          String string0 = genericKeyedObjectPool0.toString();
          assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
          assertNotNull(string0);
          assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
          assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
          assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
          assertFalse(genericKeyedObjectPool0.getTestOnCreate());
          assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
          assertFalse(genericKeyedObjectPool0.isClosed());
          assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
          assertFalse(genericKeyedObjectPool0.getFairness());
          assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
          assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
          assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
          assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
          assertTrue(genericKeyedObjectPool0.getLifo());
          assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
          assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
          assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
          assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
          assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
          assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
          assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
          assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
          assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
          assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
          assertFalse(genericKeyedObjectPool0.getTestOnReturn());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
          assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
          
          genericKeyedObjectPool0.clear();
          assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
          assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
          assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
          assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
          assertFalse(genericKeyedObjectPool0.getTestOnCreate());
          assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
          assertFalse(genericKeyedObjectPool0.isClosed());
          assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
          assertFalse(genericKeyedObjectPool0.getFairness());
          assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
          assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
          assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
          assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
          assertTrue(genericKeyedObjectPool0.getLifo());
          assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
          assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
          assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
          assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
          assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
          assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
          assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
          assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
          assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
          assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
          assertFalse(genericKeyedObjectPool0.getTestOnReturn());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
          assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
          
          boolean boolean0 = linkedHashSet0.retainAll(linkedList0);
          assertFalse(linkedHashSet0.contains(string0));
          assertFalse(boolean0);
          assertEquals(0, linkedHashSet0.size());
          assertTrue(linkedHashSet0.isEmpty());
          assertEquals(0, linkedList0.size());
          
          int int0 = 4263;
          PoolUtils.prefill((KeyedObjectPool<String, Object>) genericKeyedObjectPool0, (Collection<String>) linkedHashSet0, 4263);
          assertFalse(linkedHashSet0.contains(string0));
          assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
          assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
          assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
          assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
          assertFalse(genericKeyedObjectPool0.getTestOnCreate());
          assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
          assertFalse(genericKeyedObjectPool0.isClosed());
          assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
          assertFalse(genericKeyedObjectPool0.getFairness());
          assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
          assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
          assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
          assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
          assertTrue(genericKeyedObjectPool0.getLifo());
          assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
          assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
          assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
          assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
          assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
          assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
          assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
          assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
          assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
          assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
          assertFalse(genericKeyedObjectPool0.getTestOnReturn());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
          assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
          assertEquals(0, linkedHashSet0.size());
          assertTrue(linkedHashSet0.isEmpty());
          
          KeyedObjectPool<InternalError, InternalError> keyedObjectPool0 = null;
          Throwable throwable0 = null;
          InternalError internalError0 = new InternalError(string0, (Throwable) null);
          assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
          assertNotNull(internalError0);
          assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
          assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
          assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
          assertFalse(genericKeyedObjectPool0.getTestOnCreate());
          assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
          assertFalse(genericKeyedObjectPool0.isClosed());
          assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
          assertFalse(genericKeyedObjectPool0.getFairness());
          assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
          assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
          assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
          assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
          assertTrue(genericKeyedObjectPool0.getLifo());
          assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
          assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
          assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
          assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
          assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
          assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
          assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
          assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
          assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
          assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
          assertFalse(genericKeyedObjectPool0.getTestOnReturn());
          assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
          assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
          
          PrintStream printStream0 = null;
          try {
            printStream0 = new PrintStream(string0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"GenericKeyedObjectPool [maxTotal=-1, blockWhenExhausted=true, maxWaitMillis=-1, lifo=true, fairness=false, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=false, timeBetweenEvictionRunsMillis=-1, numTestsPerEvictionRun=3, minEvictableIdleTimeMillis=1800000, softMinEvictableIdleTimeMillis=-1, evictionPolicy=org.apache.commons.pool2.impl.DefaultEvictionPolicy@6d17983b, closeLock=java.lang.Object@597bf81, closed=false, evictionLock=java.lang.Object@7574982f, evictor=null, evictionIterator=null, factoryClassLoader=java.lang.ref.WeakReference@235b03b7, oname=org.apache.commons.pool2:type=GenericKeyedObjectPool,name=pool1961, creationStackTrace=java.lang.Exception\r
             // \tat org.apache.commons.pool2.impl.BaseGenericObjectPool.<init>(BaseGenericObjectPool.java:147)\r
             // \tat org.apache.commons.pool2.impl.GenericKeyedObjectPool.<init>(GenericKeyedObjectPool.java:110)\r
             // \tat org.apache.commons.pool2.impl.GenericKeyedObjectPool.<init>(GenericKeyedObjectPool.java:94)\r
             // \tat sun.reflect.GeneratedConstructorAccessor64.newInstance(Unknown Source)\r
             // \tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r
             // \tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r
             // \tat org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)\r
             // \tat org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)\r
             // \tat org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)\r
             // \tat org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)\r
             // \tat org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)\r
             // \tat org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)\r
             // \tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r
             // \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r
             // \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r
             // \tat java.lang.Thread.run(Thread.java:748)\r
             // , borrowedCount=0, returnedCount=0, createdCount=0, destroyedCount=0, destroyedByEvictorCount=0, destroyedByBorrowValidationCount=0, activeTimes=StatsStore [values=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], size=100, index=0], idleTimes=StatsStore [values=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], size=100, index=0], waitTimes=StatsStore [values=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], size=100, index=0], maxBorrowWaitTimeMillis=0, swallowedExceptionListener=null, maxIdlePerKey=8, minIdlePerKey=0, maxTotalPerKey=8, factory=SynchronizedKeyedPoolableObjectFactory{keyedFactory=null}, fairness=false, poolMap={}, poolKeyList=[], keyLock=java.util.concurrent.locks.ReentrantReadWriteLock@72dc91a7[Write locks = 0, Read locks = 0], numTotal=0, evictionKeyIterator=null, evictionKey=null]\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:200)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:101)
             // java.io.PrintStream.<init>(PrintStream.java:208)
             // sun.reflect.GeneratedConstructorAccessor54.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KeyedPooledObjectFactory<Object, InternalError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, InternalError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<Object, InternalError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      KeyedPooledObjectFactory<Object, InternalError> keyedPooledObjectFactory2 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory1));
      assertNotNull(keyedPooledObjectFactory2);
      assertNotSame(keyedPooledObjectFactory1, keyedPooledObjectFactory2);
      assertNotSame(keyedPooledObjectFactory2, keyedPooledObjectFactory1);
      
      KeyedPooledObjectFactory<Object, UnknownError> keyedPooledObjectFactory3 = (KeyedPooledObjectFactory<Object, UnknownError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory3).toString();
      KeyedPooledObjectFactory<Object, UnknownError> keyedPooledObjectFactory4 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory3);
      assertFalse(keyedPooledObjectFactory4.equals((Object)keyedPooledObjectFactory3));
      assertNotNull(keyedPooledObjectFactory4);
      
      GenericKeyedObjectPoolConfig<UnknownError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<UnknownError>();
      assertNotNull(genericKeyedObjectPoolConfig0);
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      
      GenericKeyedObjectPool<Object, UnknownError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, UnknownError>(keyedPooledObjectFactory4, genericKeyedObjectPoolConfig0);
      assertFalse(keyedPooledObjectFactory4.equals((Object)keyedPooledObjectFactory3));
      assertNotNull(genericKeyedObjectPool0);
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      
      KeyedObjectPool<Object, UnknownError> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<Object, UnknownError>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory4.equals((Object)keyedPooledObjectFactory3));
      assertNotNull(keyedObjectPool0);
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool(keyedObjectPool0, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PooledObjectFactory<UnknownError> pooledObjectFactory0 = (PooledObjectFactory<UnknownError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<UnknownError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<UnknownError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<UnknownError>();
      assertNotNull(genericObjectPoolConfig0);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertNotNull(abandonedConfig0);
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertEquals(300, abandonedConfig0.getRemoveAbandonedTimeout());
      
      GenericObjectPool<UnknownError> genericObjectPool0 = new GenericObjectPool<UnknownError>(pooledObjectFactory1, genericObjectPoolConfig0, abandonedConfig0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(genericObjectPool0);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertEquals(300, abandonedConfig0.getRemoveAbandonedTimeout());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertTrue(genericObjectPool0.getLifo());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(300, genericObjectPool0.getRemoveAbandonedTimeout());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertTrue(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      
      ObjectPool<UnknownError> objectPool0 = PoolUtils.erodingPool((ObjectPool<UnknownError>) genericObjectPool0, 2944.1F);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(objectPool0);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertEquals(300, abandonedConfig0.getRemoveAbandonedTimeout());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertTrue(genericObjectPool0.getLifo());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(300, genericObjectPool0.getRemoveAbandonedTimeout());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertTrue(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      
      ObjectPool<UnknownError> objectPool1 = PoolUtils.erodingPool(objectPool0, 2944.1F);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(objectPool1.equals((Object)objectPool0));
      assertNotNull(objectPool1);
      assertNotSame(objectPool0, objectPool1);
      assertNotSame(objectPool1, objectPool0);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertEquals(300, abandonedConfig0.getRemoveAbandonedTimeout());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertTrue(genericObjectPool0.getLifo());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(300, genericObjectPool0.getRemoveAbandonedTimeout());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertTrue(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      assertNotNull(genericObjectPoolConfig0);
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      
      genericObjectPoolConfig0.setNumTestsPerEvictionRun((-1));
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1), genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory1, genericObjectPoolConfig0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(genericObjectPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1), genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPool0.getFairness());
      assertTrue(genericObjectPool0.getLifo());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals((-1), genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      
      ObjectPool<Integer> objectPool0 = PoolUtils.erodingPool((ObjectPool<Integer>) genericObjectPool0, 1000.7006F);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(objectPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals((-1), genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPool0.getFairness());
      assertTrue(genericObjectPool0.getLifo());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertEquals((-1), genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      
      int int0 = 62;
      try { 
        PoolUtils.prefill(objectPool0, 62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      PooledObjectFactory<Object> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(genericObjectPool0);
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      
      try { 
        PoolUtils.prefill((ObjectPool<Object>) genericObjectPool0, 3115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<Object> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(softReferenceObjectPool0);
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      
      String string0 = softReferenceObjectPool0.toString();
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(string0);
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      
      try { 
        PoolUtils.checkMinIdle((ObjectPool<Object>) softReferenceObjectPool0, (-2725), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minIdle must be non-negative.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedKeyedPooledFactory((KeyedPooledObjectFactory<InternalError, InternalError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedFactory must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedKeyedPooledObjectFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedKeyedPooledFactory((KeyedPooledObjectFactory<UnknownError, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedFactory must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedKeyedPooledObjectFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnknownError unknownError0 = new UnknownError();
      assertNotNull(unknownError0);
      assertEquals("java.lang.UnknownError", unknownError0.toString());
      assertNull(unknownError0.getMessage());
      
      // Undeclared exception!
      try { 
        PoolUtils.checkRethrow(unknownError0);
        fail("Expecting exception: UnknownError");
      
      } catch(UnknownError e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPool((ObjectPool<StackOverflowError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPool((ObjectPool<InternalError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<Object, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<Object, UnknownError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      KeyedPooledObjectFactory<StackOverflowError, UnknownError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<StackOverflowError, UnknownError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<StackOverflowError, UnknownError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<StackOverflowError, UnknownError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<StackOverflowError, UnknownError>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(genericKeyedObjectPool0);
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<StackOverflowError, UnknownError>) genericKeyedObjectPool0, (-1122.2F), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      KeyedPooledObjectFactory<String, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<String, String> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      assertNotNull(genericKeyedObjectPoolConfig0);
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      
      GenericKeyedObjectPool<String, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, String>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(genericKeyedObjectPool0);
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      
      KeyedObjectPool<String, String> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<String, String>) genericKeyedObjectPool0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedObjectPool0);
      assertEquals(3, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericKeyedObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPoolConfig0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxTotalPerKey());
      assertEquals(8, genericKeyedObjectPoolConfig0.getMaxIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
      assertEquals("pool", genericKeyedObjectPoolConfig0.getJmxNamePrefix());
      assertNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericKeyedObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals(10000L, genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1), genericKeyedObjectPoolConfig0.getMaxTotal());
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool(keyedObjectPool0, (-6189.3975F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      SoftReferenceObjectPool<Integer> softReferenceObjectPool0 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(softReferenceObjectPool0);
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      assertFalse(softReferenceObjectPool0.isClosed());
      
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((ObjectPool<Integer>) softReferenceObjectPool0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PooledObjectFactory<StackOverflowError> pooledObjectFactory0 = (PooledObjectFactory<StackOverflowError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<StackOverflowError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      SoftReferenceObjectPool<StackOverflowError> softReferenceObjectPool0 = new SoftReferenceObjectPool<StackOverflowError>(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(softReferenceObjectPool0);
      assertFalse(softReferenceObjectPool0.isClosed());
      assertEquals(0, softReferenceObjectPool0.getNumActive());
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((ObjectPool<StackOverflowError>) softReferenceObjectPool0, (-463.60333F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "T;xS<`vwe$$:c";
      StackOverflowError stackOverflowError0 = new StackOverflowError("T;xS<`vwe$$:c");
      assertNotNull(stackOverflowError0);
      assertEquals("T;xS<`vwe$$:c", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: T;xS<`vwe$$:c", stackOverflowError0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = stackOverflowError0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("T;xS<`vwe$$:c", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: T;xS<`vwe$$:c", stackOverflowError0.toString());
      assertEquals(13, stackTraceElementArray0.length);
      
      // Undeclared exception!
      try { 
        PoolUtils.checkRethrow(stackOverflowError0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      KeyedPooledObjectFactory<StackOverflowError, StackOverflowError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<StackOverflowError, StackOverflowError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<StackOverflowError, StackOverflowError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      KeyedPooledObjectFactory<StackOverflowError, StackOverflowError> keyedPooledObjectFactory2 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory0));
      assertFalse(keyedPooledObjectFactory2.equals((Object)keyedPooledObjectFactory1));
      assertNotNull(keyedPooledObjectFactory2);
      assertNotSame(keyedPooledObjectFactory1, keyedPooledObjectFactory2);
      assertNotSame(keyedPooledObjectFactory2, keyedPooledObjectFactory1);
      
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory0 = (PooledObjectFactory<OutOfMemoryError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      PooledObjectFactory<OutOfMemoryError> pooledObjectFactory2 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory1);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory2);
      assertNotSame(pooledObjectFactory1, pooledObjectFactory2);
      assertNotSame(pooledObjectFactory2, pooledObjectFactory1);
      
      GenericObjectPoolConfig<OutOfMemoryError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<OutOfMemoryError>();
      assertNotNull(genericObjectPoolConfig0);
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      
      GenericObjectPoolConfig<OutOfMemoryError> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig0, genericObjectPoolConfig1);
      assertNotSame(genericObjectPoolConfig1, genericObjectPoolConfig0);
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(10000L, genericObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      assertNotNull(abandonedConfig0);
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertEquals(300, abandonedConfig0.getRemoveAbandonedTimeout());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      
      GenericObjectPool<OutOfMemoryError> genericObjectPool0 = new GenericObjectPool<OutOfMemoryError>(pooledObjectFactory2, genericObjectPoolConfig1, abandonedConfig0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory2));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory1));
      assertFalse(pooledObjectFactory2.equals((Object)pooledObjectFactory0));
      assertFalse(genericObjectPoolConfig0.equals((Object)genericObjectPoolConfig1));
      assertFalse(genericObjectPoolConfig1.equals((Object)genericObjectPoolConfig0));
      assertNotNull(genericObjectPool0);
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertFalse(genericObjectPoolConfig1.getFairness());
      assertEquals(0, genericObjectPoolConfig1.getMinIdle());
      assertEquals(3, genericObjectPoolConfig1.getNumTestsPerEvictionRun());
      assertEquals((-1L), genericObjectPoolConfig1.getSoftMinEvictableIdleTimeMillis());
      assertEquals("pool", genericObjectPoolConfig1.getJmxNamePrefix());
      assertFalse(genericObjectPoolConfig1.getTestOnBorrow());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig1.getEvictionPolicyClassName());
      assertEquals(8, genericObjectPoolConfig1.getMaxIdle());
      assertFalse(genericObjectPoolConfig1.getTestWhileIdle());
      assertEquals(1800000L, genericObjectPoolConfig1.getMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPoolConfig1.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig1.getTimeBetweenEvictionRunsMillis());
      assertTrue(genericObjectPoolConfig1.getLifo());
      assertFalse(genericObjectPoolConfig1.getTestOnCreate());
      assertTrue(genericObjectPoolConfig1.getBlockWhenExhausted());
      assertNull(genericObjectPoolConfig1.getJmxNameBase());
      assertTrue(genericObjectPoolConfig1.getJmxEnabled());
      assertEquals(8, genericObjectPoolConfig1.getMaxTotal());
      assertEquals(10000L, genericObjectPoolConfig1.getEvictorShutdownTimeoutMillis());
      assertEquals((-1L), genericObjectPoolConfig1.getMaxWaitMillis());
      assertFalse(abandonedConfig0.getUseUsageTracking());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnBorrow());
      assertEquals(300, abandonedConfig0.getRemoveAbandonedTimeout());
      assertFalse(abandonedConfig0.getRemoveAbandonedOnMaintenance());
      assertTrue(abandonedConfig0.getRequireFullStackTrace());
      assertFalse(abandonedConfig0.getLogAbandoned());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(300, genericObjectPool0.getRemoveAbandonedTimeout());
      assertTrue(genericObjectPool0.isAbandonedConfig());
      assertFalse(genericObjectPool0.isClosed());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertFalse(genericObjectPool0.getFairness());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      
      try { 
        PoolUtils.checkMinIdle((ObjectPool<OutOfMemoryError>) genericObjectPool0, (-3191), (long) (-3191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minIdle must be non-negative.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPooledFactory((PooledObjectFactory<UnknownError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factory must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedPooledObjectFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      KeyedPooledObjectFactory<OutOfMemoryError, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<OutOfMemoryError, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<OutOfMemoryError, String> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(keyedPooledObjectFactory1);
      
      GenericKeyedObjectPool<OutOfMemoryError, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<OutOfMemoryError, String>(keyedPooledObjectFactory1);
      assertFalse(keyedPooledObjectFactory1.equals((Object)keyedPooledObjectFactory0));
      assertNotNull(genericKeyedObjectPool0);
      assertEquals(8, genericKeyedObjectPool0.getMaxTotalPerKey());
      assertEquals(0L, genericKeyedObjectPool0.getCreatedCount());
      assertEquals(0L, genericKeyedObjectPool0.getReturnedCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanIdleTimeMillis());
      assertEquals(10000L, genericKeyedObjectPool0.getEvictorShutdownTimeoutMillis());
      assertEquals((-1), genericKeyedObjectPool0.getMaxTotal());
      assertEquals(8, genericKeyedObjectPool0.getMaxIdlePerKey());
      assertEquals(0, genericKeyedObjectPool0.getMinIdlePerKey());
      assertFalse(genericKeyedObjectPool0.isClosed());
      assertFalse(genericKeyedObjectPool0.getFairness());
      assertFalse(genericKeyedObjectPool0.getTestOnBorrow());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedCount());
      assertEquals(1800000L, genericKeyedObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getBorrowedCount());
      assertFalse(genericKeyedObjectPool0.getTestOnReturn());
      assertEquals((-1L), genericKeyedObjectPool0.getMaxWaitMillis());
      assertTrue(genericKeyedObjectPool0.getLifo());
      assertTrue(genericKeyedObjectPool0.getBlockWhenExhausted());
      assertEquals(0L, genericKeyedObjectPool0.getMeanActiveTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByBorrowValidationCount());
      assertEquals(0L, genericKeyedObjectPool0.getMeanBorrowWaitTimeMillis());
      assertFalse(genericKeyedObjectPool0.getTestWhileIdle());
      assertEquals((-1L), genericKeyedObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericKeyedObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals(0L, genericKeyedObjectPool0.getDestroyedByEvictorCount());
      assertFalse(genericKeyedObjectPool0.getTestOnCreate());
      assertEquals(3, genericKeyedObjectPool0.getNumTestsPerEvictionRun());
      
      // Undeclared exception!
      try { 
        PoolUtils.erodingPool((KeyedObjectPool<OutOfMemoryError, String>) genericKeyedObjectPool0, (-1027.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factor must be positive.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>("keys must not be null.");
      //  // Unstable assertion: assertNotNull(defaultPooledObject0);
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1584607406771L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(1584607406771L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertEquals(1584607406771L, defaultPooledObject0.getCreateTime());
      
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("keys must not be null.").when(pooledObjectFactory0).toString();
      doReturn(defaultPooledObject0, (PooledObject) null).when(pooledObjectFactory0).makeObject();
      PooledObjectFactory<Object> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(pooledObjectFactory1);
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1584607406771L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(1584607406771L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertEquals(1584607406771L, defaultPooledObject0.getCreateTime());
      
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1);
      //  // Unstable assertion: assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      //  // Unstable assertion: assertNotNull(genericObjectPool0);
      //  // Unstable assertion: assertEquals(0L, defaultPooledObject0.getBorrowedCount());
      //  // Unstable assertion: assertEquals(28L, defaultPooledObject0.getIdleTimeMillis());
      //  // Unstable assertion: assertEquals(1584607406771L, defaultPooledObject0.getLastReturnTime());
      //  // Unstable assertion: assertEquals(28L, defaultPooledObject0.getActiveTimeMillis());
      //  // Unstable assertion: assertEquals(PooledObjectState.IDLE, defaultPooledObject0.getState());
      //  // Unstable assertion: assertEquals(1584607406771L, defaultPooledObject0.getLastBorrowTime());
      //  // Unstable assertion: assertEquals(1584607406771L, defaultPooledObject0.getCreateTime());
      //  // Unstable assertion: assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getReturnedCount());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxIdle());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getCreatedCount());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestWhileIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isAbandonedConfig());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getLogAbandoned());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnCreate());
      //  // Unstable assertion: assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnReturn());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getBorrowedCount());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getLifo());
      //  // Unstable assertion: assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getFairness());
      //  // Unstable assertion: assertTrue(genericObjectPool0.getBlockWhenExhausted());
      //  // Unstable assertion: assertEquals(8, genericObjectPool0.getMaxTotal());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      //  // Unstable assertion: assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      //  // Unstable assertion: assertFalse(genericObjectPool0.isClosed());
      //  // Unstable assertion: assertEquals(0, genericObjectPool0.getMinIdle());
      //  // Unstable assertion: assertFalse(genericObjectPool0.getTestOnBorrow());
      //  // Unstable assertion: assertEquals(0L, genericObjectPool0.getDestroyedCount());
      
      try { 
        PoolUtils.prefill((ObjectPool<Object>) genericObjectPool0, 3115);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PoolUtils.TimerHolder poolUtils_TimerHolder0 = new PoolUtils.TimerHolder();
      assertNotNull(poolUtils_TimerHolder0);
      
      PooledObjectFactory<StackOverflowError> pooledObjectFactory0 = (PooledObjectFactory<StackOverflowError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<StackOverflowError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(pooledObjectFactory1);
      
      GenericObjectPoolConfig<StackOverflowError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<StackOverflowError>();
      assertNotNull(genericObjectPoolConfig0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      
      GenericObjectPool<StackOverflowError> genericObjectPool0 = new GenericObjectPool<StackOverflowError>(pooledObjectFactory1, genericObjectPoolConfig0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(genericObjectPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      
      ObjectPool<StackOverflowError> objectPool0 = PoolUtils.synchronizedPool((ObjectPool<StackOverflowError>) genericObjectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertNotNull(objectPool0);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      
      ObjectPool<StackOverflowError> objectPool1 = PoolUtils.erodingPool(objectPool0);
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(objectPool1.equals((Object)objectPool0));
      assertNotNull(objectPool1);
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
      
      PoolUtils.prefill(objectPool1, (-1954));
      assertFalse(pooledObjectFactory1.equals((Object)pooledObjectFactory0));
      assertFalse(objectPool0.equals((Object)objectPool1));
      assertFalse(objectPool1.equals((Object)objectPool0));
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
      assertEquals((-1L), genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis());
      assertEquals("pool", genericObjectPoolConfig0.getJmxNamePrefix());
      assertEquals(8, genericObjectPoolConfig0.getMaxIdle());
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
      assertEquals((-1L), genericObjectPoolConfig0.getMaxWaitMillis());
      assertEquals(1800000L, genericObjectPoolConfig0.getMinEvictableIdleTimeMillis());
      assertNull(genericObjectPoolConfig0.getJmxNameBase());
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
      assertEquals(8, genericObjectPoolConfig0.getMaxTotal());
      assertEquals(10000L, genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis());
      assertEquals(3, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
      assertFalse(genericObjectPoolConfig0.getFairness());
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
      assertEquals(0, genericObjectPoolConfig0.getMinIdle());
      assertEquals("org.apache.commons.pool2.impl.DefaultEvictionPolicy", genericObjectPoolConfig0.getEvictionPolicyClassName());
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
      assertTrue(genericObjectPoolConfig0.getLifo());
      assertEquals((-1L), genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanActiveTimeMillis());
      assertFalse(genericObjectPool0.getFairness());
      assertFalse(genericObjectPool0.getLogAbandoned());
      assertTrue(genericObjectPool0.getLifo());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnMaintenance());
      assertFalse(genericObjectPool0.getTestOnCreate());
      assertEquals(0L, genericObjectPool0.getBorrowedCount());
      assertEquals(8, genericObjectPool0.getMaxTotal());
      assertEquals(Integer.MAX_VALUE, genericObjectPool0.getRemoveAbandonedTimeout());
      assertTrue(genericObjectPool0.getBlockWhenExhausted());
      assertEquals((-1L), genericObjectPool0.getTimeBetweenEvictionRunsMillis());
      assertEquals((-1L), genericObjectPool0.getMaxWaitMillis());
      assertFalse(genericObjectPool0.isClosed());
      assertFalse(genericObjectPool0.getRemoveAbandonedOnBorrow());
      assertFalse(genericObjectPool0.getTestWhileIdle());
      assertEquals(0L, genericObjectPool0.getCreatedCount());
      assertEquals(0, genericObjectPool0.getMinIdle());
      assertFalse(genericObjectPool0.isAbandonedConfig());
      assertEquals(0L, genericObjectPool0.getDestroyedCount());
      assertEquals((-1L), genericObjectPool0.getSoftMinEvictableIdleTimeMillis());
      assertEquals(8, genericObjectPool0.getMaxIdle());
      assertFalse(genericObjectPool0.getTestOnBorrow());
      assertEquals(3, genericObjectPool0.getNumTestsPerEvictionRun());
      assertEquals(1800000L, genericObjectPool0.getMinEvictableIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByEvictorCount());
      assertEquals(0L, genericObjectPool0.getMaxBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getMeanBorrowWaitTimeMillis());
      assertEquals(0L, genericObjectPool0.getReturnedCount());
      assertEquals(0L, genericObjectPool0.getMeanIdleTimeMillis());
      assertEquals(0L, genericObjectPool0.getDestroyedByBorrowValidationCount());
      assertFalse(genericObjectPool0.getTestOnReturn());
      assertEquals(10000L, genericObjectPool0.getEvictorShutdownTimeoutMillis());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedKeyedPooledFactory((KeyedPooledObjectFactory<Integer, InternalError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedFactory must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedKeyedPooledObjectFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<UnknownError> linkedHashSet0 = new LinkedHashSet<UnknownError>();
      int int0 = 0;
      PoolUtils.checkMinIdle((KeyedObjectPool<UnknownError, String>) null, (Collection<UnknownError>) linkedHashSet0, 0, 0L);
      PooledObjectFactory<InternalError> pooledObjectFactory0 = (PooledObjectFactory<InternalError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "").when(pooledObjectFactory0).toString();
      PooledObjectFactory<InternalError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      GenericObjectPoolConfig<InternalError> genericObjectPoolConfig0 = new GenericObjectPoolConfig<InternalError>();
      GenericObjectPool<InternalError> genericObjectPool0 = new GenericObjectPool<InternalError>(pooledObjectFactory1, genericObjectPoolConfig0);
      ObjectPool<InternalError> objectPool0 = PoolUtils.erodingPool((ObjectPool<InternalError>) genericObjectPool0);
      genericObjectPoolConfig0.setMaxIdle(0);
      PoolUtils.erodingPool(objectPool0, 528.0F);
      PoolUtils poolUtils0 = new PoolUtils();
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      GenericKeyedObjectPool<OutOfMemoryError, Object> genericKeyedObjectPool0 = null;
      try {
        genericKeyedObjectPool0 = new GenericKeyedObjectPool<OutOfMemoryError, Object>((KeyedPooledObjectFactory<OutOfMemoryError, Object>) null, genericKeyedObjectPoolConfig1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factory may not be null
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Throwable throwable0 = new Throwable("X\"sO9!:rw' ve");
      PoolUtils.checkRethrow(throwable0);
      Integer integer0 = new Integer((-2143735660));
      ReferenceQueue<Integer> referenceQueue0 = new ReferenceQueue<Integer>();
      SoftReference<Integer> softReference0 = new SoftReference<Integer>(integer0, referenceQueue0);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      PooledObjectFactory<Integer> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      SoftReferenceObjectPool<Integer> softReferenceObjectPool0 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory1);
      try { 
        softReferenceObjectPool0.borrowObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      KeyedPooledObjectFactory<String, InternalError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, InternalError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      doReturn((PooledObject) null).when(keyedPooledObjectFactory0).makeObject(anyString());
      KeyedPooledObjectFactory<String, InternalError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      GenericKeyedObjectPoolConfig<InternalError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<InternalError>();
      GenericKeyedObjectPool<String, InternalError> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, InternalError>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0);
      KeyedObjectPool<String, InternalError> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<String, InternalError>) genericKeyedObjectPool0);
      genericKeyedObjectPool0.getNumActivePerKey();
      genericKeyedObjectPoolConfig0.setEvictionPolicyClassName("");
      genericKeyedObjectPoolConfig0.setTestOnReturn(true);
      PoolUtils.checkMinIdle(keyedObjectPool0, ", keyedPool=", 1429, (long) 1429);
      KeyedPooledObjectFactory<Object, OutOfMemoryError> keyedPooledObjectFactory2 = (KeyedPooledObjectFactory<Object, OutOfMemoryError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory2).toString();
      KeyedPooledObjectFactory<Object, OutOfMemoryError> keyedPooledObjectFactory3 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory2);
      PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory3);
      // Undeclared exception!
      try { 
        PoolUtils.synchronizedPool((KeyedObjectPool<StackOverflowError, InternalError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyedPool must not be null.
         //
         verifyException("org.apache.commons.pool2.PoolUtils$SynchronizedKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PoolUtils.TimerHolder poolUtils_TimerHolder0 = new PoolUtils.TimerHolder();
      GenericKeyedObjectPoolConfig<OutOfMemoryError> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<OutOfMemoryError>();
      GenericKeyedObjectPoolConfig<OutOfMemoryError> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      genericKeyedObjectPoolConfig0.setTestOnReturn(false);
      genericKeyedObjectPoolConfig1.setBlockWhenExhausted(true);
      ArrayDeque<StackOverflowError> arrayDeque0 = new ArrayDeque<StackOverflowError>();
      int int0 = (-6055);
      KeyedPooledObjectFactory<UnknownError, OutOfMemoryError> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<UnknownError, OutOfMemoryError>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory0).toString();
      KeyedPooledObjectFactory<UnknownError, OutOfMemoryError> keyedPooledObjectFactory1 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory0);
      PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory1);
      KeyedPooledObjectFactory<StackOverflowError, Integer> keyedPooledObjectFactory2 = (KeyedPooledObjectFactory<StackOverflowError, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(keyedPooledObjectFactory2).toString();
      KeyedPooledObjectFactory<StackOverflowError, Integer> keyedPooledObjectFactory3 = PoolUtils.synchronizedKeyedPooledFactory(keyedPooledObjectFactory2);
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig2 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericKeyedObjectPool<StackOverflowError, Integer> genericKeyedObjectPool0 = new GenericKeyedObjectPool<StackOverflowError, Integer>(keyedPooledObjectFactory3, genericKeyedObjectPoolConfig2);
      KeyedObjectPool<StackOverflowError, Integer> keyedObjectPool0 = PoolUtils.synchronizedPool((KeyedObjectPool<StackOverflowError, Integer>) genericKeyedObjectPool0);
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      try { 
        PoolUtils.checkMinIdle(keyedObjectPool0, stackOverflowError0, (-6055), (-335L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minIdle must be non-negative.
         //
         verifyException("org.apache.commons.pool2.PoolUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(pooledObjectFactory0).toString();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory0, genericObjectPoolConfig0, (AbandonedConfig) null);
      PooledObjectFactory<String> pooledObjectFactory1 = genericObjectPool0.getFactory();
      PooledObjectFactory<String> pooledObjectFactory2 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory1);
      GenericObjectPool<String> genericObjectPool1 = new GenericObjectPool<String>(pooledObjectFactory2, genericObjectPoolConfig0);
      try { 
        PoolUtils.checkMinIdle((ObjectPool<String>) genericObjectPool1, 2383, (-857L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-positive period.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PoolUtils poolUtils0 = new PoolUtils();
      Throwable throwable0 = new Throwable();
      throwable0.getLocalizedMessage();
      PoolUtils.checkRethrow(throwable0);
      PooledObjectFactory<StackOverflowError> pooledObjectFactory0 = (PooledObjectFactory<StackOverflowError>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(pooledObjectFactory0).toString();
      PooledObjectFactory<StackOverflowError> pooledObjectFactory1 = PoolUtils.synchronizedPooledFactory(pooledObjectFactory0);
      SoftReferenceObjectPool<StackOverflowError> softReferenceObjectPool0 = new SoftReferenceObjectPool<StackOverflowError>(pooledObjectFactory1);
      PoolUtils.synchronizedPool((ObjectPool<StackOverflowError>) softReferenceObjectPool0);
      GenericObjectPool<InternalError> genericObjectPool0 = null;
      try {
        genericObjectPool0 = new GenericObjectPool<InternalError>((PooledObjectFactory<InternalError>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // factory may not be null
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }
}
