/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 19 17:32:36 KST 2020
 */

package org.apache.commons.pool2;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.ArgumentMatchers.any;
import static org.evosuite.shaded.org.mockito.ArgumentMatchers.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedList;

import org.apache.commons.pool2.impl.DefaultEvictionPolicy;
import org.apache.commons.pool2.impl.DefaultPooledObject;
import org.apache.commons.pool2.impl.GenericKeyedObjectPool;
import org.apache.commons.pool2.impl.GenericKeyedObjectPoolConfig;
import org.apache.commons.pool2.impl.PooledSoftReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class KeyedObjectPool_ESTest extends KeyedObjectPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(keyedPooledObjectFactory0).makeObject(any());
      GenericKeyedObjectPool<Object, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, String>(keyedPooledObjectFactory0);
      genericKeyedObjectPool0.setMinIdlePerKey(0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.offer("");
      try { 
        genericKeyedObjectPool0.addObjects((Collection<Object>) arrayDeque0, 1145);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>((Object) null);
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(defaultPooledObject0).when(keyedPooledObjectFactory0).makeObject(any());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig0);
      genericKeyedObjectPool0.borrowObject(genericKeyedObjectPoolConfig0);
      try { 
        genericKeyedObjectPool0.invalidateObject(genericKeyedObjectPoolConfig0, genericKeyedObjectPoolConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>("+>S8N5PL4(U_");
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(defaultPooledObject0).when(keyedPooledObjectFactory0).makeObject(any());
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory0);
      genericKeyedObjectPool0.borrowObject("keys must not be null.");
      try { 
        genericKeyedObjectPool0.clear((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<Integer> softReference0 = new SoftReference<Integer>(integer0, referenceQueue0);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      KeyedPooledObjectFactory<String, Integer> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledSoftReference0).when(keyedPooledObjectFactory0).makeObject(anyString());
      GenericKeyedObjectPool<String, Integer> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, Integer>(keyedPooledObjectFactory0);
      DefaultEvictionPolicy<Integer> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Integer>();
      genericKeyedObjectPool0.setEvictionPolicy(defaultEvictionPolicy0);
      genericKeyedObjectPool0.borrowObject("");
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory1 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool1 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1);
      genericKeyedObjectPool1.setMaxTotalPerKey((-4217));
      assertEquals(0L, genericKeyedObjectPool1.getMeanIdleTimeMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyedPooledObjectFactory<Integer, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      GenericKeyedObjectPool<Integer, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, Object>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig1);
      genericKeyedObjectPoolConfig0.setTestWhileIdle(false);
      genericKeyedObjectPool0.setTimeBetweenEvictionRunsMillis((-1135L));
      Integer integer0 = new Integer(0);
      genericKeyedObjectPool0.getNumIdle(integer0);
      DefaultPooledObject<String> defaultPooledObject0 = new DefaultPooledObject<String>("IC<0fcCw!lB7d=|?@");
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory1 = (KeyedPooledObjectFactory<Object, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(defaultPooledObject0).when(keyedPooledObjectFactory1).makeObject(any());
      GenericKeyedObjectPool<Object, String> genericKeyedObjectPool1 = new GenericKeyedObjectPool<Object, String>(keyedPooledObjectFactory1);
      genericKeyedObjectPool1.addObject(integer0);
      KeyedPooledObjectFactory<String, String> keyedPooledObjectFactory2 = (KeyedPooledObjectFactory<String, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<String, String> genericKeyedObjectPool2 = new GenericKeyedObjectPool<String, String>(keyedPooledObjectFactory2);
      genericKeyedObjectPool2.setMaxIdlePerKey(125);
      genericKeyedObjectPool2.setMaxTotalPerKey(0);
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory3 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool3 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory3);
      Object object0 = new Object();
      Object object1 = new Object();
      genericKeyedObjectPool3.getNumIdle(object1);
      try { 
        genericKeyedObjectPool3.invalidateObject(object0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(2479L);
      genericKeyedObjectPoolConfig0.setTestWhileIdle(false);
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig0);
      genericKeyedObjectPool0.setMinIdlePerKey(1433);
      String string0 = "";
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      genericKeyedObjectPool0.clear();
      int int0 = (-858);
      genericKeyedObjectPool0.setMaxTotalPerKey((-858));
      KeyedPooledObjectFactory<String, Object> keyedPooledObjectFactory1 = (KeyedPooledObjectFactory<String, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<String, Object> genericKeyedObjectPool1 = new GenericKeyedObjectPool<String, Object>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0);
      genericKeyedObjectPool1.setMaxTotalPerKey(1433);
      genericKeyedObjectPool1.addObjects("", (-858));
      genericKeyedObjectPool0.clear();
      genericKeyedObjectPool1.clear();
      genericKeyedObjectPool0.getNumWaiters();
      try { 
        genericKeyedObjectPool0.addObjects((Object) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key must not be null.
         //
         verifyException("org.apache.commons.pool2.KeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KeyedPooledObjectFactory<String, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(keyedPooledObjectFactory0).makeObject(anyString());
      GenericKeyedObjectPool<String, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, Object>(keyedPooledObjectFactory0);
      genericKeyedObjectPool0.clear("zHdM}.OVX5U#/P");
      int int0 = 1571;
      try { 
        genericKeyedObjectPool0.addObjects("zHdM}.OVX5U#/P", 1571);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig1);
      genericKeyedObjectPool0.getFactory();
      KeyedPooledObjectFactory<String, Integer> keyedPooledObjectFactory1 = (KeyedPooledObjectFactory<String, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<String, Integer> genericKeyedObjectPool1 = new GenericKeyedObjectPool<String, Integer>(keyedPooledObjectFactory1);
      String string0 = null;
      // Undeclared exception!
      try { 
        genericKeyedObjectPool1.getNumIdle((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KeyedPooledObjectFactory<String, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<String, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, String>(keyedPooledObjectFactory0);
      genericKeyedObjectPool0.close();
      String string0 = null;
      // Undeclared exception!
      try { 
        genericKeyedObjectPool0.getNumActive((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KeyedPooledObjectFactory<String, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<String, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, String>(keyedPooledObjectFactory0);
      String string0 = null;
      String string1 = " (m<3\"UlQ1):n";
      try { 
        genericKeyedObjectPool0.returnObject((String) null, " (m<3\"UlQ1):n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyedPooledObjectFactory<String, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<String, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, Object>(keyedPooledObjectFactory0);
      genericKeyedObjectPool0.getNumIdle("c");
      KeyedPooledObjectFactory<String, Integer> keyedPooledObjectFactory1 = (KeyedPooledObjectFactory<String, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<String, Integer> genericKeyedObjectPool1 = new GenericKeyedObjectPool<String, Integer>(keyedPooledObjectFactory1);
      genericKeyedObjectPool1.getNumIdle("GvDDB=");
      genericKeyedObjectPool1.getNumActive();
      genericKeyedObjectPool1.clear("^/HA9B}]4_#QSNNLW/");
      genericKeyedObjectPool1.setTestOnCreate(false);
      genericKeyedObjectPool1.getNumIdle();
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory2 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool2 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory2, genericKeyedObjectPoolConfig0);
      genericKeyedObjectPool2.clear();
      genericKeyedObjectPool2.close();
      KeyedPooledObjectFactory<Object, Integer> keyedPooledObjectFactory3 = (KeyedPooledObjectFactory<Object, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<Object, Integer> genericKeyedObjectPool3 = new GenericKeyedObjectPool<Object, Integer>(keyedPooledObjectFactory3);
      genericKeyedObjectPool2.getNumIdle((Object) genericKeyedObjectPool0);
      genericKeyedObjectPool3.getNumWaitersByKey();
      genericKeyedObjectPool3.clearOldest();
      genericKeyedObjectPool2.clearOldest();
      genericKeyedObjectPool0.close();
      try { 
        genericKeyedObjectPool2.addObjects((Collection<Object>) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys must not be null.
         //
         verifyException("org.apache.commons.pool2.KeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig1);
      genericKeyedObjectPoolConfig0.clone();
      try { 
        genericKeyedObjectPool0.addObjects((Collection<Object>) null, 1423);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys must not be null.
         //
         verifyException("org.apache.commons.pool2.KeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeyedPooledObjectFactory<Integer, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      GenericKeyedObjectPool<Integer, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, Object>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig0);
      genericKeyedObjectPoolConfig0.setBlockWhenExhausted(true);
      genericKeyedObjectPool0.close();
      try { 
        genericKeyedObjectPool0.borrowObject((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pool not open
         //
         verifyException("org.apache.commons.pool2.impl.BaseGenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<Object, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, String>(keyedPooledObjectFactory0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1));
      genericKeyedObjectPool0.getNumIdle((Object) integer0);
      try { 
        genericKeyedObjectPool0.invalidateObject(object0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KeyedPooledObjectFactory<Integer, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setLifo(false);
      GenericKeyedObjectPool<Integer, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, String>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig0);
      int int0 = genericKeyedObjectPool0.getNumIdle();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(keyedPooledObjectFactory0).toString();
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory0);
      Integer integer0 = new Integer(0);
      genericKeyedObjectPool0.getNumActive((Object) integer0);
      Object object0 = new Object();
      genericKeyedObjectPool0.getNumIdle(object0);
      genericKeyedObjectPool0.setMinEvictableIdleTimeMillis(0);
      genericKeyedObjectPool0.close();
      genericKeyedObjectPool0.getNumActivePerKey();
      genericKeyedObjectPool0.toString();
      genericKeyedObjectPool0.getMaxIdlePerKey();
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory1 = (KeyedPooledObjectFactory<Object, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericKeyedObjectPool<Object, String> genericKeyedObjectPool1 = new GenericKeyedObjectPool<Object, String>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig0);
      genericKeyedObjectPool1.setConfig(genericKeyedObjectPoolConfig0);
      assertEquals(0L, genericKeyedObjectPool1.getCreatedCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KeyedPooledObjectFactory<String, Integer> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      GenericKeyedObjectPool<String, Integer> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, Integer>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig1);
      genericKeyedObjectPoolConfig0.setFairness(true);
      genericKeyedObjectPool0.getNumActive("+Y'");
      genericKeyedObjectPoolConfig1.setMaxIdlePerKey(0);
      int int0 = 0;
      genericKeyedObjectPoolConfig1.setFairness(false);
      Integer integer0 = new Integer(0);
      try { 
        genericKeyedObjectPool0.returnObject("2sZ%*h5>n0d", integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No keyed pool found under the given key.
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KeyedPooledObjectFactory<Integer, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      GenericKeyedObjectPool<Integer, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, Object>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig1);
      int int0 = 0;
      genericKeyedObjectPoolConfig0.setTestWhileIdle(false);
      genericKeyedObjectPool0.setTimeBetweenEvictionRunsMillis((-1135L));
      Integer integer0 = new Integer(0);
      genericKeyedObjectPool0.getNumIdle(integer0);
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory1 = (KeyedPooledObjectFactory<Object, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(keyedPooledObjectFactory1).makeObject(any());
      GenericKeyedObjectPool<Object, String> genericKeyedObjectPool1 = new GenericKeyedObjectPool<Object, String>(keyedPooledObjectFactory1);
      try { 
        genericKeyedObjectPool1.addObject(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<Object, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, String>(keyedPooledObjectFactory0);
      Object object0 = null;
      int int0 = 106;
      genericKeyedObjectPool0.setMinIdlePerKey(106);
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPool0.setConfig(genericKeyedObjectPoolConfig0);
      try { 
        genericKeyedObjectPool0.addObjects((Object) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key must not be null.
         //
         verifyException("org.apache.commons.pool2.KeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory0);
      genericKeyedObjectPool0.clearOldest();
      Integer integer0 = new Integer(0);
      genericKeyedObjectPool0.clear((Object) integer0);
      genericKeyedObjectPool0.addObjects((Object) integer0, 0);
      genericKeyedObjectPool0.getFactory();
      genericKeyedObjectPool0.close();
      assertEquals((-1L), genericKeyedObjectPool0.getTimeBetweenEvictionRunsMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<Object, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, String>(keyedPooledObjectFactory0);
      genericKeyedObjectPool0.setMaxTotal(1);
      Object object0 = new Object();
      genericKeyedObjectPool0.clear(object0);
      genericKeyedObjectPool0.getNumIdle(object0);
      KeyedPooledObjectFactory<String, String> keyedPooledObjectFactory1 = (KeyedPooledObjectFactory<String, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      genericKeyedObjectPoolConfig0.setNumTestsPerEvictionRun(0);
      genericKeyedObjectPoolConfig1.setMaxWaitMillis(1);
      GenericKeyedObjectPool<String, String> genericKeyedObjectPool1 = new GenericKeyedObjectPool<String, String>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1);
      genericKeyedObjectPool1.close();
      try { 
        genericKeyedObjectPool1.evict();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pool not open
         //
         verifyException("org.apache.commons.pool2.impl.BaseGenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KeyedPooledObjectFactory<Integer, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Integer, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      GenericKeyedObjectPool<Integer, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Integer, Object>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig0);
      genericKeyedObjectPool0.getNumActive();
      genericKeyedObjectPoolConfig0.clone();
      int int0 = 2;
      boolean boolean0 = true;
      genericKeyedObjectPoolConfig0.setTestWhileIdle(true);
      Integer integer0 = new Integer(2);
      try { 
        genericKeyedObjectPool0.returnObject(integer0, integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No keyed pool found under the given key.
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KeyedPooledObjectFactory<Object, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(keyedPooledObjectFactory0).makeObject(any());
      GenericKeyedObjectPool<Object, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, Object>(keyedPooledObjectFactory0);
      genericKeyedObjectPool0.clear();
      try { 
        genericKeyedObjectPool0.borrowObject("key must not be null.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SoftReference<String> softReference0 = new SoftReference<String>("Tnb\"Y_J`J>&}wMp~");
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>(softReference0);
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledSoftReference0, (PooledObject) null).when(keyedPooledObjectFactory0).makeObject(any());
      GenericKeyedObjectPool<Object, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, String>(keyedPooledObjectFactory0);
      genericKeyedObjectPool0.setMinIdlePerKey(0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.offer("");
      try { 
        genericKeyedObjectPool0.addObjects((Collection<Object>) arrayDeque0, 1145);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KeyedPooledObjectFactory<Object, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      GenericKeyedObjectPool<Object, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, String>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      genericKeyedObjectPool0.addObjects((Collection<Object>) linkedList0, (-578));
      assertFalse(genericKeyedObjectPool0.getFairness());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KeyedPooledObjectFactory<String, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = null;
      GenericKeyedObjectPool<String, Object> genericKeyedObjectPool0 = null;
      try {
        genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, Object>(keyedPooledObjectFactory0, (GenericKeyedObjectPoolConfig<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericKeyedObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KeyedPooledObjectFactory<Object, Integer> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<Object, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setFairness(true);
      genericKeyedObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(10000L);
      GenericKeyedObjectPool<Object, Integer> genericKeyedObjectPool0 = new GenericKeyedObjectPool<Object, Integer>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig0);
      genericKeyedObjectPool0.setMaxTotalPerKey((-251));
      genericKeyedObjectPool0.setMaxIdlePerKey(636);
      genericKeyedObjectPoolConfig0.setNumTestsPerEvictionRun((-251));
      genericKeyedObjectPoolConfig0.clone();
      genericKeyedObjectPoolConfig0.setTestOnBorrow(false);
      int int0 = genericKeyedObjectPool0.getNumActive((Object) genericKeyedObjectPoolConfig0);
      DefaultEvictionPolicy<Integer> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Integer>();
      genericKeyedObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericKeyedObjectPool0.setMaxIdlePerKey(0);
      KeyedPooledObjectFactory<String, String> keyedPooledObjectFactory1 = (KeyedPooledObjectFactory<String, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<String, String> genericKeyedObjectPool1 = new GenericKeyedObjectPool<String, String>(keyedPooledObjectFactory1);
      int int1 = genericKeyedObjectPool1.getNumIdle();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<Object> softReference0 = new SoftReference<Object>(object0, referenceQueue0);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      KeyedPooledObjectFactory<String, Object> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, Object>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledSoftReference0).when(keyedPooledObjectFactory0).makeObject(anyString());
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setBlockWhenExhausted(true);
      genericKeyedObjectPoolConfig0.setMinEvictableIdleTimeMillis(1L);
      genericKeyedObjectPoolConfig0.setTestOnReturn(true);
      genericKeyedObjectPoolConfig0.setJmxEnabled(true);
      GenericKeyedObjectPool<String, Object> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, Object>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig0);
      genericKeyedObjectPool0.clear("jN7Xg$N");
      genericKeyedObjectPool0.getNumIdle();
      genericKeyedObjectPool0.preparePool("0#0=qX3\"mS$ZvSHayg");
      genericKeyedObjectPoolConfig0.setNumTestsPerEvictionRun(0);
      genericKeyedObjectPool0.getNumActive();
      genericKeyedObjectPool0.getNumIdle("");
      KeyedPooledObjectFactory<String, String> keyedPooledObjectFactory1 = (KeyedPooledObjectFactory<String, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig1 = new GenericKeyedObjectPoolConfig<String>();
      GenericKeyedObjectPool<String, String> genericKeyedObjectPool1 = new GenericKeyedObjectPool<String, String>(keyedPooledObjectFactory1, genericKeyedObjectPoolConfig1);
      genericKeyedObjectPool0.addObjects("", 0);
      genericKeyedObjectPool1.addObjects("t", 0);
      genericKeyedObjectPool0.addObject("RETURNING");
      genericKeyedObjectPool1.close();
      KeyedPooledObjectFactory<Object, Integer> keyedPooledObjectFactory2 = (KeyedPooledObjectFactory<Object, Integer>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPool<Object, Integer> genericKeyedObjectPool2 = new GenericKeyedObjectPool<Object, Integer>(keyedPooledObjectFactory2);
      genericKeyedObjectPool2.setMinIdlePerKey(3000);
      assertEquals(8, genericKeyedObjectPool2.getMaxTotalPerKey());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KeyedPooledObjectFactory<String, String> keyedPooledObjectFactory0 = (KeyedPooledObjectFactory<String, String>) mock(KeyedPooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig1 = genericKeyedObjectPoolConfig0.clone();
      GenericKeyedObjectPool<String, String> genericKeyedObjectPool0 = new GenericKeyedObjectPool<String, String>(keyedPooledObjectFactory0, genericKeyedObjectPoolConfig1);
      genericKeyedObjectPool0.setMaxIdlePerKey(0);
      assertFalse(genericKeyedObjectPool0.isClosed());
  }
}
