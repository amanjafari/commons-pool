/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Mar 19 17:44:14 KST 2020
 */

package org.apache.commons.pool2;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class PoolUtils_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  protected static ExecutorService executor; 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.pool2.PoolUtils"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    executor.shutdownNow(); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 


  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(PoolUtils_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.commons.pool2.PooledObject",
      "org.apache.commons.pool2.PoolUtils$SynchronizedPooledObjectFactory",
      "org.apache.commons.pool2.impl.BaseObjectPoolConfig",
      "org.apache.commons.pool2.PooledObjectState",
      "org.apache.commons.pool2.impl.LinkedBlockingDeque$Itr",
      "org.apache.commons.pool2.impl.InterruptibleReentrantLock",
      "org.apache.commons.pool2.UsageTracking",
      "org.apache.commons.pool2.PoolUtils",
      "org.apache.commons.pool2.BaseObject",
      "org.apache.commons.pool2.PoolUtils$ErodingPerKeyKeyedObjectPool",
      "org.apache.commons.pool2.impl.GenericObjectPool",
      "org.apache.commons.pool2.PoolUtils$SynchronizedKeyedPooledObjectFactory",
      "org.apache.commons.pool2.impl.EvictionTimer",
      "org.apache.commons.pool2.impl.LinkedBlockingDeque",
      "org.apache.commons.pool2.impl.GenericKeyedObjectPoolMXBean",
      "org.apache.commons.pool2.impl.GenericObjectPoolMXBean",
      "org.apache.commons.pool2.impl.EvictionPolicy",
      "org.apache.commons.pool2.SwallowedExceptionListener",
      "org.apache.commons.pool2.impl.PoolImplUtils",
      "org.apache.commons.pool2.PooledObjectFactory",
      "org.apache.commons.pool2.impl.AbandonedConfig",
      "org.apache.commons.pool2.PoolUtils$ErodingObjectPool",
      "org.apache.commons.pool2.PoolUtils$SynchronizedObjectPool",
      "org.apache.commons.pool2.PoolUtils$ErodingFactor",
      "org.apache.commons.pool2.impl.LinkedBlockingDeque$Node",
      "org.apache.commons.pool2.impl.DefaultEvictionPolicy",
      "org.apache.commons.pool2.PoolUtils$SynchronizedKeyedObjectPool",
      "org.apache.commons.pool2.impl.GenericKeyedObjectPool$ObjectDeque",
      "org.apache.commons.pool2.ObjectPool",
      "org.apache.commons.pool2.impl.DefaultPooledObject",
      "org.apache.commons.pool2.impl.GenericObjectPoolConfig",
      "org.apache.commons.pool2.KeyedPooledObjectFactory",
      "org.apache.commons.pool2.impl.PooledSoftReference",
      "org.apache.commons.pool2.impl.SoftReferenceObjectPool",
      "org.apache.commons.pool2.impl.NoOpCallStack",
      "org.apache.commons.pool2.impl.BaseGenericObjectPool$Evictor",
      "org.apache.commons.pool2.impl.DefaultPooledObjectInfoMBean",
      "org.apache.commons.pool2.impl.CallStack",
      "org.apache.commons.pool2.impl.BaseGenericObjectPool$StatsStore",
      "org.apache.commons.pool2.PoolUtils$KeyedObjectPoolMinIdleTimerTask",
      "org.apache.commons.pool2.impl.EvictionTimer$EvictorThreadFactory",
      "org.apache.commons.pool2.PoolUtils$ObjectPoolMinIdleTimerTask",
      "org.apache.commons.pool2.impl.BaseGenericObjectPool",
      "org.apache.commons.pool2.impl.GenericKeyedObjectPool",
      "org.apache.commons.pool2.PoolUtils$TimerHolder",
      "org.apache.commons.pool2.PoolUtils$ErodingKeyedObjectPool",
      "org.apache.commons.pool2.impl.LinkedBlockingDeque$AbstractItr",
      "org.apache.commons.pool2.KeyedObjectPool",
      "org.apache.commons.pool2.impl.DefaultPooledObjectInfo",
      "org.apache.commons.pool2.BaseObjectPool",
      "org.apache.commons.pool2.impl.BaseGenericObjectPool$IdentityWrapper",
      "org.apache.commons.pool2.impl.GenericKeyedObjectPoolConfig"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.apache.commons.pool2.KeyedPooledObjectFactory", false, PoolUtils_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.commons.pool2.PooledObjectFactory", false, PoolUtils_ESTest_scaffolding.class.getClassLoader()));
  }
}
